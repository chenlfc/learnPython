# 到目前为止我学到了什么？
from ... imput ... # 用于从包中引入模块
imput ...# 用于直接引入包

+ # 加号，返回两个数相加的结果
- # 减号，返回两个数相减的结果
* # 乘号，返回两个数相乘的结果
/ # 除号，返回两个数相除的结果
// # 整除符号，返回两个数相除后的整数部分
% # 取余符号，返回两个数相除后的余数
= # 等于符号，给变量赋值
< # 小于符号，比较两个值的大小，返回布尔值True or False
<= # 小于等于符号
> # 大于符号
>= # 大于等于符号
== # 双等于符号，比较两个值是否相等，返回布尔值

print(”文本 带入参数 %s %s 换行符\n“ % (参数1, 参数2), end='') # 打印输出函数
# 用于输出的通配符
%s # 输出字符串
%d # 输出数值
%f # 输出浮点数
%r # 输出值的真实情况，多用于调试时
# 转义符号
\\ # 输出反斜杠
\n # 输出一个换行
\t # 输出一个TAB
\a # 系统发出一声哔
\b # 退格键，删除这个符号后的一个字符
\f # 换页符，换页后的起始位置是换页前的右侧边
\r # 回车符，退回前一行用符号后的字符替代
\uxxxx # 输出16位的Unicode码字符
\Uxxxxxxxx # 输出32位的Unicode码字符
\v # 竖向制表符，结果类似换页符
\ooo # 输出八进制字符
\xhh # 输出十六进制字符

input("提示文本") # 用于接收用户输入

from sys imput argv # 从sys包中引入argv模块用于读取输入的参数

open("文件名", ”模式“) # 打开一个文件用于操作
                      # 模式有只读r 重写w 追加a 
#用于操作打开后的文件的函数
read() # 读取文件全部内容
readline() # 读取一行内容
readlines() # 读取并返回当前文件中剩余的行
seek() # 移动当前文件指针到指定位置
close() # 关闭当前打开的文件
write() # 写入文本到文件中
truncate() # 清空文件中的所有内容

# 自定义函数
def 自定义函数名(参数1, 参数2, 参数n):
    函数内容
    return 返回值
